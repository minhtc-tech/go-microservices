{{template "base" .}}

{{define "content" }}
<div class="container">
  <div class="row">
    <div class="col">
      <h1 class="mt-5 text-muted">MinhTC - Microservices</h1>
      <h6 class="text-muted fw-normal">Note: You can alse test the API with your PostMan</h6>
      <hr class="mb-3" />
      <div id="btn-container"></div>
      <div class="p-4 mt-4 rounded border bg-light">
        <div id="output" class="lh-lg overflow-auto" style="max-height: 10rem;">
          <span class="text-muted">Output shows here...</span>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col">
      <h4 class="mt-4 mb-3">Sent</h4>
      <pre 
        class="rounded p-4 border bg-light" id="payload"
      >Nothing sent yet...</pre>
    </div>
    <div class="col">
      <h4 class="mt-4 mb-3">Received</h4>
      <pre 
        class="rounded p-4 border bg-light" id="received"
      >Nothing received yet...</pre>
    </div>
  </div>
</div>
{{ end }}

{{define "js"}}
<script>
  const microEvent = (endpoint, payload) => {
    const brokerURL = {{.BrokerURL}};
    const output = document.getElementById("output");
    const sent = document.getElementById("payload");
    const received = document.getElementById("received");

    const headers = new Headers();
    headers.append("Content-Type", "application/json");

    const body = {
      method: "POST",
      body: JSON.stringify(payload),
      headers: headers,
    };

    fetch(`${brokerURL}${endpoint}`, body)
      .then((res) => res.json())
      .then((data) => {
        sent.innerHTML = JSON.stringify(payload, undefined, 2);
        received.innerHTML = JSON.stringify(data, undefined, 2);

        if (data.error) {
          output.innerHTML = `<span class="text-danger">Error:</span> ${data.message}<br>` + output.innerHTML;
        } else {
          output.innerHTML = `<span class="text-success">Broker Service - Response</span>: ${data.message}<br>` + output.innerHTML;
        }
      })
      .catch((err) => {
        output.innerHTML = "<span class='text-danger'>Error:</span> " + err + "<br>" + output.innerHTML;
      });
  };

  const btnList = [
    {
      content: "Test Broker",
      event: microEvent.bind(this, "", "Empty post request"),
    },
    {
      content: "Test Auth",
      event: microEvent.bind(this, "/handle", {
        action: "auth",
        auth: {
          email: "admin@example.com",
          password: "verysecret",
        },
      }),
    },
    {
      content: "Test Log",
      event: microEvent.bind(this, "/handle", {
        action: "log",
        log: {
          name: "event",
          data: "Some kind of data",
        },
      }),
    },
    {
      content: "Test Mail",
      event: microEvent.bind(this, "/handle", {
        action: "mail",
        mail: {
          from: "me@example.com",
          to: "you@example.com",
          subject: "Test email",
          message: "Hello world!",
        },
      }),
    },
    {
      content: "Test gRPC log",
      event: microEvent.bind(this, "/log-grpc", {
        action: "log",
        log: {
          name: "event",
          data: "Some kind of gRPC data",
        },
      }),
    },
  ];

  const btnContainer = document.getElementById("btn-container");
  btnList.forEach(btn => {
    const btnEl = document.createElement("a");
    btnEl.setAttribute("href", "javascript:void(0)");
    btnEl.classList.add("btn", "btn-outline-success", "m-1");

    btnEl.innerHTML = btn.content;
    btnEl.addEventListener("click", btn.event);

    btnContainer.appendChild(btnEl);
  });
</script>
{{ end }}
